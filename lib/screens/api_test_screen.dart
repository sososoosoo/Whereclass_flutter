import 'package:flutter/material.dart';
import 'package:whc_proto/widgets/api_svg_widget.dart';
import 'package:whc_proto/services/api_service.dart';

class ApiTestScreen extends StatefulWidget {
  const ApiTestScreen({super.key});

  @override
  State<ApiTestScreen> createState() => _ApiTestScreenState();
}

class _ApiTestScreenState extends State<ApiTestScreen> {
  String selectedBuilding = 'Î∞±Ïö¥Í¥Ä';
  String selectedFloor = '1';

  final List<String> buildings = [
    'Î∞±Ïö¥Í¥Ä',
    'Ïª®Î≤ÑÏ†ºÏä§ ÌôÄ',
    'Ï∞ΩÏ°∞Í¥Ä',
    'Ï≤≠ÏÜ°Í¥Ä',
    'ÎØ∏ÎûòÍ¥Ä',
    'Ï†ïÏùòÍ¥Ä',
  ];

  final List<String> floors = ['1', '2', '3', '4', '5'];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('API ÌÖåÏä§Ìä∏'),
        backgroundColor: const Color(0xFF00AEFF),
        foregroundColor: Colors.white,
      ),
      body: Column(
        children: [
          // Ïª®Ìä∏Î°§ Ìå®ÎÑê
          Container(
            padding: const EdgeInsets.all(16),
            color: Colors.grey[100],
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  'API Î∞±ÏóîÎìú Ïó∞Í≤∞ ÌÖåÏä§Ìä∏',
                  style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                ),
                const SizedBox(height: 16),
                Row(
                  children: [
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          const Text('Í±¥Î¨º ÏÑ†ÌÉù:'),
                          DropdownButton<String>(
                            value: selectedBuilding,
                            isExpanded: true,
                            items: buildings.map((building) {
                              return DropdownMenuItem(
                                value: building,
                                child: Text(building),
                              );
                            }).toList(),
                            onChanged: (value) {
                              if (value != null) {
                                setState(() {
                                  selectedBuilding = value;
                                });
                              }
                            },
                          ),
                        ],
                      ),
                    ),
                    const SizedBox(width: 16),
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          const Text('Ï∏µ ÏÑ†ÌÉù:'),
                          DropdownButton<String>(
                            value: selectedFloor,
                            isExpanded: true,
                            items: floors.map((floor) {
                              return DropdownMenuItem(
                                value: floor,
                                child: Text('${floor}Ï∏µ'),
                              );
                            }).toList(),
                            onChanged: (value) {
                              if (value != null) {
                                setState(() {
                                  selectedFloor = value;
                                });
                              }
                            },
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 16),
                Row(
                  children: [
                    ElevatedButton(
                      onPressed: _testApiConnection,
                      child: const Text('API Ïó∞Í≤∞ ÌÖåÏä§Ìä∏'),
                    ),
                    const SizedBox(width: 8),
                    ElevatedButton(
                      onPressed: () {
                        setState(() {
                          // Í∞ïÏ†ú Î¶¨ÎπåÎìúÎ°ú SVG ÏúÑÏ†Ø ÏÉàÎ°úÍ≥†Ïπ®
                        });
                      },
                      child: const Text('ÏÉàÎ°úÍ≥†Ïπ®'),
                    ),
                  ],
                ),
              ],
            ),
          ),
          // SVG ÌëúÏãú ÏòÅÏó≠
          Expanded(
            child: Container(
              padding: const EdgeInsets.all(16),
              child: ApiSvgWidget(
                buildingName: selectedBuilding,
                floorNum: selectedFloor,
                onSvgElementTap: (svgId, itemInfo) {
                  _showRoomInfo(svgId, itemInfo);
                },
              ),
            ),
          ),
        ],
      ),
    );
  }

  void _testApiConnection() async {
    try {
      showDialog(
        context: context,
        barrierDismissible: false,
        builder: (context) => const AlertDialog(
          content: Row(
            children: [
              CircularProgressIndicator(),
              SizedBox(width: 16),
              Text('API Ïó∞Í≤∞ ÌÖåÏä§Ìä∏ Ï§ë...'),
            ],
          ),
        ),
      );

      // Í±¥Î¨º Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞ ÌÖåÏä§Ìä∏
      final buildings = await ApiService.getAvailableBuildings();

      // ÌäπÏ†ï Í±¥Î¨ºÏùò Ï∏µ Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞ ÌÖåÏä§Ìä∏
      final buildingId = ApiService.getBuildingId(selectedBuilding);
      final floors = await ApiService.getAvailableFloors(buildingId);

      // Í±¥Î¨º Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ ÌÖåÏä§Ìä∏
      final buildingData = await ApiService.getBuildingData(buildingId);

      Navigator.of(context).pop(); // Î°úÎî© Îã§Ïù¥ÏñºÎ°úÍ∑∏ Îã´Í∏∞

      // Í≤∞Í≥º ÌëúÏãú
      showDialog(
        context: context,
        builder: (context) => AlertDialog(
          title: const Text('API ÌÖåÏä§Ìä∏ Í≤∞Í≥º'),
          content: SingleChildScrollView(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              mainAxisSize: MainAxisSize.min,
              children: [
                Text('üè¢ Í±¥Î¨º Î™©Î°ù (${buildings.length}Í∞ú):'),
                Text(buildings.join(', ')),
                const SizedBox(height: 16),
                Text('üè¢ $selectedBuilding Ï∏µ Î™©Î°ù (${floors.length}Í∞ú):'),
                Text(floors.join(', ')),
                const SizedBox(height: 16),
                Text('üìä Í±¥Î¨º Îç∞Ïù¥ÌÑ∞:'),
                Text(buildingData != null ? '‚úÖ ÏÑ±Í≥µ' : '‚ùå Ïã§Ìå®'),
                if (buildingData != null)
                  Text('Building ID: ${buildingData['id']}'),
              ],
            ),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: const Text('ÌôïÏù∏'),
            ),
          ],
        ),
      );
    } catch (e) {
      Navigator.of(context).pop(); // Î°úÎî© Îã§Ïù¥ÏñºÎ°úÍ∑∏ Îã´Í∏∞

      showDialog(
        context: context,
        builder: (context) => AlertDialog(
          title: const Text('API Ïó∞Í≤∞ Ïã§Ìå®'),
          content: Text('Ïò§Î•ò: $e'),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: const Text('ÌôïÏù∏'),
            ),
          ],
        ),
      );
    }
  }

  void _showRoomInfo(String svgId, Map<String, dynamic> itemInfo) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Í∞ïÏùòÏã§ Ï†ïÎ≥¥'),
        content: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          mainAxisSize: MainAxisSize.min,
          children: [
            Text('ID: $svgId'),
            Text('Ïù¥Î¶Ñ: ${itemInfo['display_name'] ?? 'N/A'}'),
            Text('ÌÉÄÏûÖ: ${itemInfo['type'] ?? 'N/A'}'),
            const SizedBox(height: 8),
            const Text('üéâ ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏Í∞Ä Ï†ïÏÉÅ ÏûëÎèôÌï©ÎãàÎã§!'),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('ÌôïÏù∏'),
          ),
        ],
      ),
    );
  }
}